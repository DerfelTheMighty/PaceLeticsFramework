@page "/Athletes/racepaces"

@using AthleteDataAccessLibrary;
@using CoreLibrary.Models.Athlet;
@using AthleteDataAccessLibrary.Contracts;
@using CoreLibrary.Models.Pace;
@using CoreLibrary.Models.Race;
@using MudBlazor.Extensions.Core;
@using MudBlazor;
@using Race;

@inject RaceResultModelFactory RaceModelFactory
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAthleteData AthleteData
@inject IJSRuntime js;
@inject IDialogService dialogService;


<PageTitle>Meine Laufergebnisse</PageTitle>

<h1>Meine Laufergebnisse</h1>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">


    @if (isLoading)
    {
        <LoadingScreen Label="Deine Daten werden geladen..."/>
    }
    else
    {
        <MudStack Spacingv="3">
            <MudAlert Severity="Severity.Info">
                Hier kannst du deine Laufergebnisse eintragen. 
            </MudAlert>

            @foreach(var item in Athlete.RaceResults)
            {
                <PaceLetics.Web.Pages.Race.RaceCard Model="@item"/>
            }
            <MudButton OnClick="AddAthlete">
                <MudExIcon Icon="@Icons.Material.Filled.AddRoad" Size="Size.Large" Color="MudExColor.Info" />
            </MudButton>
        </MudStack>

    }

</MudContainer>

@code
{
    string input = string.Empty;



    bool isLoading = true;

    AthleteModel? Athlete;

    protected async override void OnInitialized()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var ID = await GetUserId();
        Athlete = await AthleteData.GetAthlete(ID);
        //await AthleteData.UpdateAthlete(Athlete);
        Athlete.RaceResults = RaceModelFactory.CreateRaceResults();
        isLoading = false;
        
        StateHasChanged();
        base.OnInitialized();
    }

    async Task<string> GetUserName()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        return user.Identity.Name;
    }

    async Task<string> GetUserId()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return userid;
    }

    private async Task AddAthlete()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small
            };

        var result = await dialogService.Show<AddRaceDialog>(string.Empty, new DialogParameters(), options).Result;
        this.input = result.Data as string ?? string.Empty;
    }

}
