@page "/Athletes/racepaces"

@using AthleteDataAccessLibrary;
@using CoreLibrary.Models.Athlet;
@using AthleteDataAccessLibrary.Contracts;
@using CoreLibrary.Models.Pace;
@using CoreLibrary.Models.Race;
@using MudBlazor.Extensions.Core;
@using MudBlazor;
@using Race;
@using CoreLibrary.Constants;
@using CoreLibrary.Models.Race;

@inject RaceResultModelFactory RaceModelFactory
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAthleteData AthleteData
@inject IJSRuntime js;
@inject IDialogService dialogService;


<PageTitle>Meine Laufergebnisse</PageTitle>

<h1>Meine Laufergebnisse</h1>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">


    @if (isLoading)
    {
        <LoadingScreen Label="Deine Daten werden geladen..."/>
    }
    else
    {
        <MudStack Spacingv="3">
            <MudText >
                Hier kannst du deine Laufergebnisse eintragen. 
            </MudText>


            <MudExCardList @ref="component" TData="RaceResultModel">
                @foreach (var item in _samples)
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudExGrid>
                                    @switch (item?.Type)
                                    {
                                        case RaceKeys.D1k:
                                            <MudAvatar>
                                                <MudImage Src="images/icons/epace.png"></MudImage>
                                            </MudAvatar>
                                            break;
                                        case RaceKeys.D3k:
                                            <MudAvatar>
                                                <MudImage Src="images/icons/mpace.png"></MudImage>
                                            </MudAvatar>
                                            break;
                                        case RaceKeys.D5k:
                                            <MudAvatar>
                                                <MudImage Src="images/icons/tpace.png"></MudImage>
                                            </MudAvatar>
                                            break;
                                        case RaceKeys.D10k:
                                            <MudAvatar>
                                                <MudImage Src="images/icons/ipace.png"></MudImage>
                                            </MudAvatar>
                                            break;
                                        case RaceKeys.D15k:
                                            <MudAvatar>
                                                <MudImage Src="images/icons/rpace.png"></MudImage>
                                            </MudAvatar>
                                            break;
                                        case RaceKeys.D21k:
                                            <MudAvatar>
                                                <MudImage Src="images/icons/rpace.png"></MudImage>
                                            </MudAvatar>
                                            break;
                                        default:
                                            <MudAvatar>
                                                <MudImage Src="images/icons/epace.png"></MudImage>
                                            </MudAvatar>
                                            break;
                                    }
                                    <MudText>@item?.Date.ToString("dd-MM-yyyy")</MudText>
                                </MudExGrid>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>@item?.Id</MudText>
                            <MudText>
                                Ergebnis: <b>@item?.Time.ToString()</b>
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </MudExCardList>
            <MudButton OnClick="AddAthlete">
                <MudExIcon Icon="@Icons.Material.Filled.AddRoad" Size="Size.Large" Color="MudExColor.Info" />
            </MudButton>

        </MudStack>

    }

</MudContainer>

@code
{
    MudExCardList<RaceResultModel> component;
    private IEnumerable<RaceResultModel> _selected;
    private RaceResultModel[] _samples;

    string input = string.Empty;



    bool isLoading = true;

    AthleteModel? Athlete;



    protected async override void OnInitialized()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var ID = await GetUserId();
        Athlete = await AthleteData.GetAthlete(ID);
        //await AthleteData.UpdateAthlete(Athlete);
        Athlete.RaceResults = RaceModelFactory.CreateRaceResults();
        _samples = Athlete.RaceResults.ToArray();
        _selected = new[] { _samples[0] };
        isLoading = false;
        
        StateHasChanged();
        base.OnInitialized();
    }

    async Task<string> GetUserName()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        return user.Identity.Name;
    }

    async Task<string> GetUserId()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return userid;
    }

    private async Task AddAthlete()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small
            };

        var result = await dialogService.Show<AddRaceDialog>(string.Empty, new DialogParameters(), options).Result;
        this.input = result.Data as string ?? string.Empty;
    }

}
