@page "/Athletes/racepaces"

@using AthleteDataAccessLibrary;
@using CoreLibrary.Models.Athlet;
@using AthleteDataAccessLibrary.Contracts;
@using CoreLibrary.Models.Pace;
@using CoreLibrary.Models.Race;
@using MudBlazor.Extensions.Core;

@inject RaceResultModelFactory RaceModelFactory
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAthleteData AthleteData

<PageTitle>Meine Laufergebnisse</PageTitle>

<h1>Meine Laufergebnisse</h1>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">


    @if (isLoading)
    {
        <MudGrid Class="d-flex justify-center">
            <MudCard>
                <MudAlert Severity="Severity.Info">
                    Deine Daten werden für dich vorbereitet. 
                </MudAlert>
                <MudExGradientText Palette="palette" Align="Align.Center">
                    |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
                    </MudExGradientText>
            </MudCard>
        </MudGrid>
        
    }
    else
    {
        <MudStack Spacingv="3">
            <MudAlert Severity="Severity.Info">
                Hier kannst du deine Laufergebnisse eintragen. 
            </MudAlert>

                @foreach(var item in Athlete.RaceResults)
                {
                        <PaceLetics.Web.Pages.Race.RaceCard Model="@item"/>
                }

        </MudStack>

    }

</MudContainer>

@code
{
    List<MudExColor> palette = new List<MudExColor>()
    {
        MudExColor.DrawerBackground, 
        MudExColor.Error, 
        MudExColor.DrawerBackground, 
        MudExColor.DrawerBackground,
        MudExColor.Error
    };

    bool isLoading = true;
    string Name ="";
    string ID = "";
    AthleteModel? Athlete;
    Random rnd = new Random();
    MudExCardList<RaceResultModel> CardList;

    protected async override void OnInitialized()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        Name = await GetUserName();
        ID = await GetUserId();
        Athlete = await AthleteData.GetAthlete(ID);
        //await AthleteData.UpdateAthlete(Athlete);
        Athlete.RaceResults = RaceModelFactory.CreateRaceResults();
        isLoading = false;
        
        StateHasChanged();
        base.OnInitialized();
    }

    async Task<string> GetUserName()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        return user.Identity.Name;
    }

    async Task<string> GetUserId()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return userid;
    }

}
