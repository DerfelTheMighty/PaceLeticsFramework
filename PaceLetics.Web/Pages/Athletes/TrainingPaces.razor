@page "/Athletes/trainingpaces"

@using AthleteDataAccessLibrary;
@using CoreLibrary.Models.Athlet;
@using AthleteDataAccessLibrary.Contracts;

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAthleteData AthleteData

<PageTitle>Training Paces</PageTitle>





<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">


    <MudText>
      Die Pace ist das wichtigste Steuerungsinstrument für dein Lauftraining.
      Hier findest du alles über die optimalen Trainingsbereiche.
    </MudText>


    <MudStack Spacing="3">

        <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="E Pace" />

        <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="M Pace" />

        <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="T Pace" />

        <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="I Pace" />

        <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="R Pace" />
    </MudStack>



<MudAvatar>
    <MudImage Src="images/icons/epace.png"></MudImage>
</MudAvatar>

<MudAvatar>
    <MudImage Src="images/icons/mpace.png"></MudImage>
</MudAvatar>

<MudAvatar>
    <MudImage Src="images/icons/tpace.png"></MudImage>
</MudAvatar>

<MudAvatar>
    <MudImage Src="images/icons/ipace.png"></MudImage>
</MudAvatar>

<MudAvatar>
    <MudImage Src="images/icons/rpace.png"></MudImage>
</MudAvatar>


</MudContainer>

@if (Athlete?.Vdot < 1)
{
    <MudText>Füge einen Einstufungslauf hinzu, damit wir deine individuellen Pacebereiche für dich bestimmen können.</MudText>
}
else
{
}


@code
{
    string Name ="";
    string ID = "";
    AthleteModel Athlete;
    Random rnd = new Random();

    protected async override void OnInitialized()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        Name = await GetUserName();
        ID = await GetUserId();
        Athlete = await AthleteData.GetAthlete(ID);
        Athlete.Vdot = rnd.NextDouble();
        await AthleteData.UpdateAthlete(Athlete);
        StateHasChanged();
        base.OnInitialized();
    }

    async Task<string> GetUserName()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        return user.Identity.Name;
    }

    async Task<string> GetUserId()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return userid;
    }

}
