@page "/Athletes/trainingpaces"

@using AthleteDataAccessLibrary;
@using CoreLibrary.Models.Athlet;
@using AthleteDataAccessLibrary.Contracts;
@using CoreLibrary.Models.Pace;
@using MudBlazor.Extensions.Core;

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAthleteData AthleteData
@inject IDialogService dialogService


<PageTitle>Meine Pacebereiche</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">


    @if (_isLoading)
    {
        <LoadingScreen Label="Deine Daten werden geladen..." />        
    }
    else
    {
        <h1>Meine Pacebereiche</h1>

        <MudStack Spacing="3">
            <MudText>
                Deine individuelle Trainingspace ist das wichtigste Steuerungsinstrument für dein Lauftraining.
                Hier findest du eine Übersicht.
            </MudText>

            @if (_athlete?.Vdot < 1)
            {
                <MudCard>
                    <MudAlert Severity="Severity.Warning">Füge einen Einstufungslauf hinzu, damit wir deine optimale Trainingspace für dich bestimmen können.</MudAlert>
                </MudCard>
            }
            <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="E Pace" LowerPace="@_lowerPace.Easy" UpperPace="@_upperPace.Easy" />

            <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="M Pace" LowerPace="@_lowerPace.Marathon" UpperPace="@_upperPace.Marathon" />

            <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="T Pace" LowerPace="@_lowerPace.Threshold" UpperPace="@_upperPace.Threshold" />

            <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="I Pace" LowerPace="@_lowerPace.Intervall" UpperPace="@_upperPace.Intervall" />

            <PaceLetics.Web.Pages.Pace.PaceCard PaceKey="R Pace" LowerPace="@_lowerPace.Repetition" UpperPace="@_upperPace.Repetition" />
            
    </MudStack>

    }

</MudContainer>

@code
{

    private bool _isLoading = true;
    private AthleteModel? _athlete;
    private PaceModel _lowerPace = new PaceModel();
    private PaceModel _upperPace = new PaceModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var userID = authState.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

            if (!string.IsNullOrEmpty(userID))
            {
                _athlete = await AthleteData.GetAthlete(userID);

                if (_athlete?.PaceModel != null)
                {
                    _upperPace = _athlete.PaceModel;
                    _lowerPace = _athlete.PaceModel.Reduce(0.975);
                }
            }
        }
        catch (Exception ex)
        {
            var errorMessage = "$Es gab ein Problem beim Laden Ihrer Daten. Bitte versuchen Sie es später erneut oder kontaktieren Sie den Support.";
            IMudExDialogReference<MudExMessageDialog>? dlg = await dialogService.ShowInformationAsync("Achtung", errorMessage, Icons.Material.Filled.Error, false, true);
        }
        finally
        {
            _isLoading = false;
        }
    }
}
