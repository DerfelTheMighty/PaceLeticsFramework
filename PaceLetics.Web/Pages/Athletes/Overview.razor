@page "/Athletes/overview"
@using AthleteDataAccessLibrary;
@using AthleteDataAccessLibrary.Contracts;
@using CoreLibrary.Models.Athlet;
@using MudBlazor;

@inject IAthleteData AthleteData
@inject AuthenticationStateProvider GetAuthenticationStateAsync








@code
{
    AthleteModel Athlete;


    protected async override void OnInitialized()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var name = await GetUserName();
        var id = await GetUserId();
        Athlete = await AthleteData.GetAthlete(id);
        StateHasChanged();
        base.OnInitialized();
    }

    async Task<string> GetUserName()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        return user.Identity.Name;
    }

    async Task<string> GetUserId()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return userid;
    }


}
