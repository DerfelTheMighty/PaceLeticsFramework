@page "/"
@page "/Athletes/dashboard"
@using AthleteDataAccessLibrary;
@using AthleteDataAccessLibrary.Contracts;

@using MudBlazor;
@using PaceLetics.AthleteModule.CodeBase.Models;

@inject IAthleteData AthleteData
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<PageTitle>Dashboard</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Small">

   
    @if (_isLoading){
        <LoadingScreen Label="Deine Daten werden geladen..."/>
    }
    else
    {
        <h1>Dashboard</h1>
        <MudStack Spacingv="3">
            <h3>Hallo @_name</h3>
            <MudText>
                Hier findest du in Zukunft aktuelle Neuigkeiten zum Kurs, Infos zu kommenden Trainingseinheiten und Trainingsvorschläge.
            </MudText>
        </MudStack>
    }
</MudContainer>
    


@code
{
    bool _isLoading = true;
    AthleteModel Athlete;
    string _name = String.Empty;

    protected async override void OnInitialized()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var id = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        _name = user.Identity.Name;
        Athlete = await AthleteData.GetAthlete(id);
        if (Athlete.AthleteId == null)
        {
            Athlete.AthleteId = Guid.NewGuid().ToString();
            await AthleteData.UpdateAthlete(Athlete);
        }

        _isLoading = false;
        StateHasChanged();
        base.OnInitialized();
    }

}
