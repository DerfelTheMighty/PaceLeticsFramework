@page "/"
@page "/Athletes/dashboard"
@using AthleteDataAccessLibrary;
@using AthleteDataAccessLibrary.Contracts;
@using CoreLibrary.Models.Athlet;
@using MudBlazor;

@inject IAthleteData AthleteData
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<PageTitle>Dashboard</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

   
        @if (_isLoading)
        {
            <LoadingScreen Label="Deine Daten werden geladen..."/>
        }
        else
        {
            <h1>Dashboard</h1>
            <MudStack Spacingv="3">
                <H3>Hallo @_name</H3>
                <MudText>
                    Hier findest du in Zukunft aktuelle Neuigkeiten zum Kurs, Infos zu kommenden Trainingseinheiten und Trainingsvorschläge.
                </MudText>
            </MudStack>
        }
</MudContainer>
    


@code
{
    bool _isLoading = true;
    AthleteModel Athlete;
    string _name = String.Empty;

    protected async override void OnInitialized()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        _name = await GetUserName();
        var id = await GetUserId();
        Athlete = await AthleteData.GetAthlete(id);
        _isLoading = false;
        StateHasChanged();
        base.OnInitialized();
    }

    async Task<string> GetUserName()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        return user.Identity.Name;
    }

    async Task<string> GetUserId()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return userid;
    }


}
