@page "/Workouts/workout_main"
@using WorkoutModule.Contracts;
@using WorkoutModule.Logic;
@using WorkoutModule.Services;
@using WorkoutModule.Models;

@inject IWorkoutProvider woProvider;

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Small">

    @if (_isLoading)
    {
        <LoadingScreen Label="Deine Daten werden geladen..."/>
    }
    else
    {
        <h1>Workout Area</h1>
        <MudText>
            Hier findest du eine stetig wachsende Auswahl an verschiedenen Workouts.
        </MudText>
        <MudStack Spacing="3" AlignItems="AlignItems.Stretch">
            <PaceLetics.Components.Components.Workout.WorkoutView Workout="@_prev"></PaceLetics.Components.Components.Workout.WorkoutView>
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudStack>
        
        
    }
 </MudContainer>



@code {
    bool _isLoading;
    List<string> _workouts;
    List<WorkoutPreview> _workoutPrevs;
    WorkoutPreview _prev;

    protected override void OnInitialized()
    {
        _workoutPrevs = new List<WorkoutPreview>();
        _workouts = woProvider.GetWorkoutIds();
        foreach (var wo in _workouts)
        {
            _workoutPrevs.Add(woProvider.GetWorkoutPreview(wo));
        }
        _prev = _workoutPrevs[0];
    }


    private async void OnExStart(IWorkoutElement el)
    {
        //if (el.Type == WorkoutModule.Enums.WorkoutElement.Exercise)
            //InvokeAsync(() =>
            //{
            //    _currentExercise = el as IExerciseInfo;
            //    StateHasChanged();
            //});
    }
}
