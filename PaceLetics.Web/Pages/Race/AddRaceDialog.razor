@using CoreLibrary.Constants;
@using CoreLibrary.Models.Race

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Neuer Lauf</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Value="@this._input" Immediate="@true" Label="Name" />
        <MudSelect 
        Dense="true" T="string" Label="Distanz" Variant="Variant.Text" ValueChanged="value=>OnRaceTypeChanged(value)">
            <MudSelectItem Value="@RaceKeys.D1k" />
            <MudSelectItem Value="@RaceKeys.D3k" />
            <MudSelectItem Value="@RaceKeys.D5k" />
            <MudSelectItem Value="@RaceKeys.D10k" />
            <MudSelectItem Value="@RaceKeys.D15k" />
            <MudSelectItem Value="@RaceKeys.D21k" />
            <MudSelectItem Value="@RaceKeys.D42k" />
        </MudSelect>
        <MudText>@_model.DistanceM</MudText>
        <MudDatePicker Label="Datum" Date="@_model.Date"/>
        
    </DialogContent>

    <DialogActions>
        <MudButton Disabled="@string.IsNullOrWhiteSpace(this._input)"
                   OnClick="@this.OK"
                   Size="@Size.Small">
            Hinzufügen
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private RaceResultModel _model = new RaceResultModel();
    private string _input = string.Empty;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private void OK() => this.MudDialog.Close(DialogResult.Ok(this._input));

    private void OnRaceTypeChanged(string value)
    {
        _model.Type = value;
        _model.DistanceM = RaceDistances.Dict[value];
        StateHasChanged();
    }
}
